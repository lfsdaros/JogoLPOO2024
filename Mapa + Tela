package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JPanel;
import java.awt.Image;
import javax.swing.ImageIcon;

//import Personagem.PersonagemPadrao;

public class Tela extends JPanel implements Runnable{

    final int originalTileSize = 16;
    final int scale = 3;
    final int tileSize = originalTileSize * scale;
    final int maxScreenCol = 16;
    final int maxScreenRow = 12;
    final int screenWidth = tileSize * maxScreenCol;
    final int screenHeight = tileSize * maxScreenRow;
    private double intervalo;
    private double delta;
    private long ultimaAtualizacao;
    private long tempoReal;
    private Image playerSprite;
    private Image objectSprite;
    //private Image background;
    private int objectX;
    private int objectY;
    private int objectWidth;
    private int objectHeight;
    private int largura_mapa;
    private int altura_mapa;
    //private int[][] mapa_expansao;
    private Image[] tileImages;
    
    public int getOriginalTileSize() {
        return originalTileSize;
    }

    public int getScale() {
        return scale;
    }

    public int getTileSize() {
        return tileSize;
    }

    public int getMaxScreenCol() {
        return maxScreenCol;
    }

    public int getMaxScreenRow() {
        return maxScreenRow;
    }

    public int getScreenWidth() {
        return screenWidth;
    }

    public int getScreenHeight() {
        return screenHeight;
    }

    public double getIntervalo() {
        return intervalo;
    }

    public void setIntervalo(double intervalo) {
        this.intervalo = intervalo;
    }

    public double getDelta() {
        return delta;
    }

    public void setDelta(double delta) {
        this.delta = delta;
    }

    public long getUltimaAtualizacao() {
        return ultimaAtualizacao;
    }

    public void setUltimaAtualizacao(long ultimaAtualizacao) {
        this.ultimaAtualizacao = ultimaAtualizacao;
    }

    public long getTempoReal() {
        return tempoReal;
    }

    public void setTempoReal(long tempoReal) {
        this.tempoReal = tempoReal;
    }

    public int getFps() {
        return fps;
    }

    public void setFps(int fps) {
        this.fps = fps;
    }

    public Movimento getM1() {
        return m1;
    }

    public void setM1(Movimento m1) {
        this.m1 = m1;
    }

    public Thread getGameThread() {
        return gameThread;
    }

    public void setGameThread(Thread gameThread) {
        this.gameThread = gameThread;
    }

    public int getPlayerX() {
        return playerX;
    }

    public void setPlayerX(int playerX) {
        this.playerX = playerX;
    }

    public int getPlayerY() {
        return playerY;
    }

    public void setPlayerY(int playerY) {
        this.playerY = playerY;
    }

    public int getPlayerSpeed() {
        return playerSpeed;
    }

    public void setPlayerSpeed(int playerSpeed) {
        this.playerSpeed = playerSpeed;
    }
    

    private int fps = 60;
    
    Movimento m1 = new Movimento(getAutoscrolls(), getAutoscrolls(), getAutoscrolls(), getAutoscrolls());
    Thread gameThread;
    //PersonagemPadrao pp = new PersonagemPadrao(saudeAtual, nivelAtual, this, m1);
    
    private int[][] mapa_expansao;
    private int playerX = 100;
    private int playerY = 100;
    private int playerSpeed = 4;

    public Tela(){
        this.setPreferredSize(new Dimension(screenWidth, screenHeight));
        this.setBackground(Color.black);
        this.setDoubleBuffered(true);
        this.addKeyListener(m1);
        this.setFocusable(true);
        
        playerSprite = new ImageIcon("C:\\Users\\Saúde\\OneDrive\\Área de Trabalho\\FrontEnd Hospitais\\png-clipart-pixel-art-drawing-art-game-character-animation-animation-game-cartoon.png").getImage();   
        //background = new ImageIcon("C:\\Users\\Saúde\\OneDrive\\Área de Trabalho\\FrontEnd Hospitais\\4d4039533c63d1a.png").getImage();
        objectSprite = new ImageIcon("C:\\Users\\Saúde\\OneDrive\\Área de Trabalho\\FrontEnd Hospitais\\png-transparent-pixel-art-2d-platform-text-computer-computer-wallpaper.png").getImage();
        
        objectX = 200;
        objectY = 300;
        objectWidth = 32;
        objectHeight = 32;
        
        largura_mapa = maxScreenCol * tileSize;
        altura_mapa = maxScreenRow * tileSize;
        mapa_expansao = new int[largura_mapa / tileSize][altura_mapa / tileSize];
        inicializarMapaExpansao();
        
        tileImages = new Image[2];
        tileImages[0] = new ImageIcon("C:\\Users\\Saúde\\OneDrive\\Área de Trabalho\\FrontEnd Hospitais\\images1.1.png").getImage(); 
        tileImages[1] = new ImageIcon("C:\\Users\\Saúde\\OneDrive\\Área de Trabalho\\FrontEnd Hospitais\\images2.1.png").getImage(); 
    
    }
    
    private void inicializarMapaExpansao() {
        for (int i = 0; i < largura_mapa / tileSize; i++) {
            for (int j = 0; j < altura_mapa / tileSize; j++) {
                mapa_expansao[i][j] = 0; 
            }
        }
    }
    public void startGameThread(){
        gameThread = new Thread(this);
        gameThread.start();
    }

    @Override
    public void run(){
        intervalo = 1000000000/fps;
        delta = 0;
        ultimaAtualizacao = System.nanoTime();
        tempoReal = 0;
        //long timer = 0;
        //long contador = 0;

        while(gameThread != null) {
            
            tempoReal = System.nanoTime();
            delta += (tempoReal - ultimaAtualizacao)/intervalo;
            ultimaAtualizacao = tempoReal;
            //timer += (tempoReal - ultimaAtualizacao);


            if(delta >= 1){
            update();
            repaint();
            delta--;
            //contador++;
            }
            
            //if(timer >= 1000000000){

            //}
        }
        }

    public void update(){
        
        if(m1.getUpPressed() == true){
            playerY -= playerSpeed;
        }
        else if(m1.getDownPressed() == true){
            playerY += playerSpeed;
        }
        else if(m1.getLeftPressed() == true){
            playerX -= playerSpeed;
        }
        else if(m1.getRightPressed() == true){
            playerX += playerSpeed;
        }
        if (playerX < 0 || playerX >= largura_mapa || playerY < 0 || playerY >= altura_mapa) {
            expandMap();
        }
    }
    
    public void expandMap() {
        int novaLargura = largura_mapa * 2;
        int novaAltura = altura_mapa * 2;
        int[][] novoMapa = new int[novaLargura / tileSize][novaAltura / tileSize];

        for (int i = 0; i < largura_mapa / tileSize; i++) {
            for (int j = 0; j < altura_mapa / tileSize; j++) {
                novoMapa[i][j] = mapa_expansao[i][j];
            }
        }

        mapa_expansao = novoMapa;
        largura_mapa = novaLargura;
        altura_mapa = novaAltura;

        for (int i = largura_mapa / 2 / tileSize; i < largura_mapa / tileSize; i++) {
            for (int j = altura_mapa / 2 / tileSize; j < altura_mapa / tileSize; j++) {
                mapa_expansao[i][j] = 1; // Novo tipo de terreno
            }
        }
    }
    
    public void paintComponent(Graphics g){

        int startX = Math.max(0, playerX / tileSize - screenWidth / tileSize / 2);
        int startY = Math.max(0, playerY / tileSize - screenHeight / tileSize / 2);
        int endX = Math.min(largura_mapa / tileSize, startX + screenWidth / tileSize + 1);
        int endY = Math.min(altura_mapa / tileSize, startY + screenHeight / tileSize + 1);
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g; 
        g2.drawImage(playerSprite, playerX, playerY, tileSize, tileSize, null);
        for (int x = startX; x < endX; x++) {
            for (int y = startY; y < endY; y++) {
                int tileType = mapa_expansao[x][y];
                g2.drawImage(tileImages[tileType], x * tileSize - playerX + screenWidth / 2, y * tileSize - playerY + screenHeight / 2, tileSize, tileSize, null);
            }
        }
        
        //g2.drawImage(background, 0, 0, screenWidth, screenHeight, null);
        g2.drawImage(playerSprite, playerX, playerY, tileSize, tileSize, null);
        g2.drawImage(objectSprite, objectX, objectY, objectWidth, objectHeight, null);
        g2.dispose();
    
    }
}




